#!/bin/bash

# Script para testar CORS com a configura√ß√£o espec√≠fica do clubeyellow.maisaqui.com.br
# Valida se o .htaccess est√° funcionando corretamente

echo "=== TESTE CORS CLUBEYELLOW.MAISAQUI.COM.BR ==="
echo "Data: $(date)"
echo ""

# Configura√ß√µes
API_URL="https://maisaqu.com/api/v1/login"
ORIGIN="https://clubeyellow.maisaqui.com.br"

echo "üéØ Testando CORS para:"
echo "   API: $API_URL"
echo "   Origin: $ORIGIN"
echo ""

# 1. Teste OPTIONS (Preflight)
echo "1. Teste OPTIONS (Preflight Request)"
echo "====================================="
echo "üîÑ Enviando requisi√ß√£o OPTIONS..."

OPTIONS_RESPONSE=$(curl -s -I -X OPTIONS \
  -H "Origin: $ORIGIN" \
  -H "Access-Control-Request-Method: POST" \
  -H "Access-Control-Request-Headers: Content-Type, Authorization" \
  "$API_URL" 2>/dev/null)

echo "üìã Resposta completa:"
echo "$OPTIONS_RESPONSE"
echo ""

# Verificar headers CORS espec√≠ficos
echo "üîç Verificando headers CORS:"
echo "----------------------------"

# Access-Control-Allow-Origin
ALLOW_ORIGIN=$(echo "$OPTIONS_RESPONSE" | grep -i "access-control-allow-origin" | head -n 1)
if echo "$ALLOW_ORIGIN" | grep -q "clubeyellow.maisaqui.com.br"; then
    echo "‚úÖ Access-Control-Allow-Origin: CORRETO ($ALLOW_ORIGIN)"
else
    echo "‚ùå Access-Control-Allow-Origin: INCORRETO ou AUSENTE ($ALLOW_ORIGIN)"
fi

# Access-Control-Allow-Methods
ALLOW_METHODS=$(echo "$OPTIONS_RESPONSE" | grep -i "access-control-allow-methods" | head -n 1)
if echo "$ALLOW_METHODS" | grep -q "POST"; then
    echo "‚úÖ Access-Control-Allow-Methods: CORRETO ($ALLOW_METHODS)"
else
    echo "‚ùå Access-Control-Allow-Methods: INCORRETO ou AUSENTE ($ALLOW_METHODS)"
fi

# Access-Control-Allow-Headers
ALLOW_HEADERS=$(echo "$OPTIONS_RESPONSE" | grep -i "access-control-allow-headers" | head -n 1)
if echo "$ALLOW_HEADERS" | grep -q "Content-Type"; then
    echo "‚úÖ Access-Control-Allow-Headers: CORRETO ($ALLOW_HEADERS)"
else
    echo "‚ùå Access-Control-Allow-Headers: INCORRETO ou AUSENTE ($ALLOW_HEADERS)"
fi

# Access-Control-Allow-Credentials
ALLOW_CREDENTIALS=$(echo "$OPTIONS_RESPONSE" | grep -i "access-control-allow-credentials" | head -n 1)
if echo "$ALLOW_CREDENTIALS" | grep -q "true"; then
    echo "‚úÖ Access-Control-Allow-Credentials: CORRETO ($ALLOW_CREDENTIALS)"
else
    echo "‚ùå Access-Control-Allow-Credentials: INCORRETO ou AUSENTE ($ALLOW_CREDENTIALS)"
fi

# Status Code
STATUS_CODE=$(echo "$OPTIONS_RESPONSE" | head -n 1 | grep -o '[0-9]\{3\}')
echo "üìä Status Code: $STATUS_CODE"
if [ "$STATUS_CODE" = "200" ] || [ "$STATUS_CODE" = "204" ]; then
    echo "‚úÖ Status Code: OK"
else
    echo "‚ùå Status Code: ERRO ($STATUS_CODE)"
fi

echo ""

# 2. Teste POST (Requisi√ß√£o Real)
echo "2. Teste POST (Requisi√ß√£o Real)"
echo "==============================="
echo "üîÑ Enviando requisi√ß√£o POST..."

POST_RESPONSE=$(curl -s -I -X POST \
  -H "Origin: $ORIGIN" \
  -H "Content-Type: application/json" \
  -H "Accept: application/json" \
  -d '{"email":"test@example.com","password":"test123"}' \
  "$API_URL" 2>/dev/null)

echo "üìã Resposta completa:"
echo "$POST_RESPONSE"
echo ""

# Verificar headers CORS na resposta POST
echo "üîç Verificando headers CORS na resposta POST:"
echo "---------------------------------------------"

POST_ALLOW_ORIGIN=$(echo "$POST_RESPONSE" | grep -i "access-control-allow-origin" | head -n 1)
if echo "$POST_ALLOW_ORIGIN" | grep -q "clubeyellow.maisaqui.com.br"; then
    echo "‚úÖ POST Access-Control-Allow-Origin: CORRETO ($POST_ALLOW_ORIGIN)"
else
    echo "‚ùå POST Access-Control-Allow-Origin: INCORRETO ou AUSENTE ($POST_ALLOW_ORIGIN)"
fi

POST_STATUS_CODE=$(echo "$POST_RESPONSE" | head -n 1 | grep -o '[0-9]\{3\}')
echo "üìä POST Status Code: $POST_STATUS_CODE"

echo ""

# 3. Teste com origem n√£o permitida
echo "3. Teste com origem N√ÉO PERMITIDA"
echo "================================="
echo "üîÑ Testando com origem n√£o autorizada..."

UNAUTH_ORIGIN="https://malicious-site.com"
UNAUTH_RESPONSE=$(curl -s -I -X OPTIONS \
  -H "Origin: $UNAUTH_ORIGIN" \
  -H "Access-Control-Request-Method: POST" \
  "$API_URL" 2>/dev/null)

UNAUTH_ALLOW_ORIGIN=$(echo "$UNAUTH_RESPONSE" | grep -i "access-control-allow-origin" | head -n 1)
if echo "$UNAUTH_ALLOW_ORIGIN" | grep -q "clubeyellow.maisaqui.com.br"; then
    echo "‚úÖ Origem n√£o autorizada BLOQUEADA corretamente"
else
    echo "‚ö†Ô∏è Origem n√£o autorizada pode estar sendo aceita: $UNAUTH_ALLOW_ORIGIN"
fi

echo ""

# 4. Teste de conectividade b√°sica
echo "4. Teste de conectividade b√°sica"
echo "================================"
echo "üîÑ Testando conectividade com o servidor..."

PING_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "https://maisaqu.com" 2>/dev/null)
echo "üìä Conectividade com maisaqu.com: $PING_RESPONSE"

if [ "$PING_RESPONSE" = "200" ] || [ "$PING_RESPONSE" = "301" ] || [ "$PING_RESPONSE" = "302" ]; then
    echo "‚úÖ Servidor acess√≠vel"
else
    echo "‚ùå Problema de conectividade com o servidor"
fi

echo ""

# 5. Verificar se Cloudflare est√° ativo
echo "5. Verifica√ß√£o Cloudflare"
echo "========================"
echo "üîÑ Verificando headers do Cloudflare..."

CF_HEADERS=$(curl -s -I "https://maisaqu.com" 2>/dev/null | grep -i "cf-")
if [ -n "$CF_HEADERS" ]; then
    echo "‚úÖ Cloudflare detectado:"
    echo "$CF_HEADERS"
else
    echo "‚ö†Ô∏è Cloudflare n√£o detectado ou headers n√£o vis√≠veis"
fi

echo ""

# Resumo final
echo "=== RESUMO DO TESTE ==="
echo "‚úÖ = Funcionando corretamente"
echo "‚ùå = Problema encontrado"
echo "‚ö†Ô∏è = Aten√ß√£o necess√°ria"
echo ""

# Contadores
SUCCESS_COUNT=0
ERROR_COUNT=0

# Verificar resultados principais
if echo "$ALLOW_ORIGIN" | grep -q "clubeyellow.maisaqui.com.br"; then
    ((SUCCESS_COUNT++))
else
    ((ERROR_COUNT++))
fi

if echo "$ALLOW_METHODS" | grep -q "POST"; then
    ((SUCCESS_COUNT++))
else
    ((ERROR_COUNT++))
fi

if echo "$ALLOW_HEADERS" | grep -q "Content-Type"; then
    ((SUCCESS_COUNT++))
else
    ((ERROR_COUNT++))
fi

if echo "$ALLOW_CREDENTIALS" | grep -q "true"; then
    ((SUCCESS_COUNT++))
else
    ((ERROR_COUNT++))
fi

echo "üìä Resultado geral:"
echo "   ‚úÖ Sucessos: $SUCCESS_COUNT/4"
echo "   ‚ùå Erros: $ERROR_COUNT/4"

if [ $ERROR_COUNT -eq 0 ]; then
    echo "üéâ CORS configurado PERFEITAMENTE!"
    echo "   A configura√ß√£o do .htaccess est√° funcionando corretamente."
elif [ $SUCCESS_COUNT -gt $ERROR_COUNT ]; then
    echo "‚ö†Ô∏è CORS parcialmente funcional"
    echo "   Alguns headers est√£o corretos, mas h√° problemas a corrigir."
else
    echo "‚ùå CORS com PROBLEMAS CR√çTICOS"
    echo "   A configura√ß√£o precisa ser revisada urgentemente."
fi

echo ""
echo "üìã Pr√≥ximos passos se houver problemas:"
echo "1. üîß Verificar se mod_headers est√° habilitado no Apache"
echo "2. üîß Verificar se AllowOverride All est√° configurado"
echo "3. üîß Verificar logs do Apache: tail -f /var/log/apache2/error.log"
echo "4. üîß Testar configura√ß√£o Apache: apache2ctl configtest"
echo "5. üåê Verificar configura√ß√£o do Cloudflare Transform Rules"
echo "6. üîÑ Recarregar Apache: systemctl reload apache2"
echo ""
echo "=== FIM DO TESTE ==="