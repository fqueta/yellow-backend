#!/bin/bash

# Script para corrigir automaticamente erro 500 no Laravel
# Foca nas causas mais comuns: permiss√µes, cache, configura√ß√µes

echo "=== CORRE√á√ÉO AUTOM√ÅTICA ERRO 500 LARAVEL ==="
echo "Data: $(date)"
echo ""

# Verificar se estamos no diret√≥rio correto
if [ ! -f "artisan" ]; then
    echo "‚ùå Erro: Este n√£o √© um projeto Laravel (artisan n√£o encontrado)"
    echo "üìã Execute este script no diret√≥rio raiz do projeto Laravel"
    exit 1
fi

echo "‚úÖ Projeto Laravel detectado"
echo ""

# 1. Backup de seguran√ßa
echo "1. Criando backup de seguran√ßa..."
echo "----------------------------------"
BACKUP_DIR="backup_$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"
cp .env "$BACKUP_DIR/.env.backup" 2>/dev/null && echo "‚úÖ Backup .env criado" || echo "‚ö†Ô∏è .env n√£o encontrado"
cp -r storage/logs "$BACKUP_DIR/logs_backup" 2>/dev/null && echo "‚úÖ Backup logs criado" || echo "‚ö†Ô∏è Logs n√£o encontrados"
echo "üìã Backup salvo em: $BACKUP_DIR"

# 2. Verificar e criar .env se necess√°rio
echo ""
echo "2. Verificando arquivo .env..."
echo "-----------------------------"
if [ ! -f ".env" ]; then
    echo "‚ùå Arquivo .env n√£o encontrado"
    if [ -f ".env.example" ]; then
        cp .env.example .env
        echo "‚úÖ .env criado a partir do .env.example"
    else
        echo "‚ùå .env.example tamb√©m n√£o encontrado"
        echo "üîß Criando .env b√°sico..."
        cat > .env << 'EOF'
APP_NAME=Laravel
APP_ENV=production
APP_KEY=
APP_DEBUG=false
APP_URL=https://maisaqu.com

LOG_CHANNEL=stack
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=error

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=laravel
DB_USERNAME=root
DB_PASSWORD=

BROADCAST_DRIVER=log
CACHE_DRIVER=file
FILESYSTEM_DRIVER=local
QUEUE_CONNECTION=sync
SESSION_DRIVER=file
SESSION_LIFETIME=120

MEMCACHED_HOST=127.0.0.1

REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=smtp
MAIL_HOST=mailhog
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
MAIL_FROM_ADDRESS=null
MAIL_FROM_NAME="${APP_NAME}"

AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=
AWS_USE_PATH_STYLE_ENDPOINT=false

PUSHER_APP_ID=
PUSHER_APP_KEY=
PUSHER_APP_SECRET=
PUSHER_APP_CLUSTER=mt1

MIX_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
MIX_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"
EOF
        echo "‚úÖ .env b√°sico criado"
    fi
else
    echo "‚úÖ Arquivo .env encontrado"
fi

# 3. Corrigir permiss√µes cr√≠ticas
echo ""
echo "3. Corrigindo permiss√µes..."
echo "---------------------------"
echo "üîß Corrigindo permiss√µes do storage..."
chmod -R 755 storage 2>/dev/null && echo "‚úÖ Permiss√µes storage corrigidas" || echo "‚ùå Erro ao corrigir storage"

echo "üîß Corrigindo permiss√µes do bootstrap/cache..."
chmod -R 755 bootstrap/cache 2>/dev/null && echo "‚úÖ Permiss√µes bootstrap/cache corrigidas" || echo "‚ùå Erro ao corrigir bootstrap/cache"

echo "üîß Corrigindo permiss√µes do .env..."
chmod 644 .env 2>/dev/null && echo "‚úÖ Permiss√µes .env corrigidas" || echo "‚ùå Erro ao corrigir .env"

# Tentar corrigir ownership (pode falhar se n√£o for root)
echo "üîß Tentando corrigir ownership..."
chown -R www-data:www-data storage bootstrap/cache 2>/dev/null && echo "‚úÖ Ownership corrigido" || echo "‚ö†Ô∏è Ownership n√£o alterado (execute como root se necess√°rio)"

# 4. Gerar chave da aplica√ß√£o
echo ""
echo "4. Verificando chave da aplica√ß√£o..."
echo "----------------------------------"
APP_KEY=$(grep '^APP_KEY=' .env | cut -d'=' -f2)
if [ -z "$APP_KEY" ] || [ "$APP_KEY" = "" ]; then
    echo "‚ùå APP_KEY vazia, gerando nova chave..."
    php artisan key:generate --force 2>/dev/null && echo "‚úÖ Chave gerada com sucesso" || echo "‚ùå Erro ao gerar chave"
else
    echo "‚úÖ APP_KEY j√° configurada"
fi

# 5. Limpar todos os caches
echo ""
echo "5. Limpando caches..."
echo "-------------------"
echo "üîß Limpando cache de aplica√ß√£o..."
php artisan cache:clear 2>/dev/null && echo "‚úÖ Cache limpo" || echo "‚ùå Erro ao limpar cache"

echo "üîß Limpando cache de configura√ß√£o..."
php artisan config:clear 2>/dev/null && echo "‚úÖ Config cache limpo" || echo "‚ùå Erro ao limpar config cache"

echo "üîß Limpando cache de rotas..."
php artisan route:clear 2>/dev/null && echo "‚úÖ Route cache limpo" || echo "‚ùå Erro ao limpar route cache"

echo "üîß Limpando cache de views..."
php artisan view:clear 2>/dev/null && echo "‚úÖ View cache limpo" || echo "‚ùå Erro ao limpar view cache"

# 6. Verificar e instalar depend√™ncias
echo ""
echo "6. Verificando depend√™ncias..."
echo "-----------------------------"
if [ ! -d "vendor" ] || [ ! -f "vendor/autoload.php" ]; then
    echo "‚ùå Depend√™ncias n√£o encontradas, instalando..."
    composer install --no-dev --optimize-autoloader 2>/dev/null && echo "‚úÖ Depend√™ncias instaladas" || echo "‚ùå Erro ao instalar depend√™ncias"
else
    echo "‚úÖ Depend√™ncias encontradas"
    echo "üîß Otimizando autoloader..."
    composer dump-autoload --optimize 2>/dev/null && echo "‚úÖ Autoloader otimizado" || echo "‚ùå Erro ao otimizar autoloader"
fi

# 7. Recriar caches otimizados
echo ""
echo "7. Recriando caches otimizados..."
echo "--------------------------------"
echo "üîß Criando cache de configura√ß√£o..."
php artisan config:cache 2>/dev/null && echo "‚úÖ Config cache criado" || echo "‚ùå Erro ao criar config cache"

echo "üîß Criando cache de rotas..."
php artisan route:cache 2>/dev/null && echo "‚úÖ Route cache criado" || echo "‚ùå Erro ao criar route cache"

# 8. Verificar estrutura de diret√≥rios
echo ""
echo "8. Verificando estrutura..."
echo "--------------------------"
DIRS=("storage/app" "storage/framework/cache" "storage/framework/sessions" "storage/framework/views" "storage/logs")
for dir in "${DIRS[@]}"; do
    if [ ! -d "$dir" ]; then
        echo "üîß Criando diret√≥rio: $dir"
        mkdir -p "$dir" && chmod 755 "$dir"
    fi
done
echo "‚úÖ Estrutura de diret√≥rios verificada"

# 9. Teste b√°sico da aplica√ß√£o
echo ""
echo "9. Testando aplica√ß√£o..."
echo "------------------------"
echo "üîÑ Testando artisan..."
php artisan --version 2>/dev/null && echo "‚úÖ Laravel funcionando" || echo "‚ùå Laravel com problemas"

echo "üîÑ Verificando rotas..."
php artisan route:list 2>/dev/null | grep -q "api/v1/login" && echo "‚úÖ Rota login encontrada" || echo "‚ö†Ô∏è Rota login n√£o encontrada"

# 10. Teste HTTP local
echo ""
echo "10. Teste HTTP local..."
echo "----------------------"
echo "üîÑ Testando endpoint local..."
RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "http://127.0.0.1/api/v1/login" 2>/dev/null)
if [ "$RESPONSE" = "200" ] || [ "$RESPONSE" = "405" ] || [ "$RESPONSE" = "404" ]; then
    echo "‚úÖ Servidor respondendo (c√≥digo: $RESPONSE)"
else
    echo "‚ùå Servidor n√£o respondendo ou erro 500 (c√≥digo: $RESPONSE)"
fi

# Resumo final
echo ""
echo "=== RESUMO DA CORRE√á√ÉO ==="
echo "‚úÖ = Corrigido com sucesso"
echo "‚ùå = Erro encontrado"
echo "‚ö†Ô∏è = Aten√ß√£o necess√°ria"
echo ""
echo "Se erro 500 persistir:"
echo "1. üîç Verificar logs: tail -f storage/logs/laravel.log"
echo "2. üîç Verificar logs Apache: tail -f /var/log/apache2/error.log"
echo "3. üîß Verificar configura√ß√£o do banco de dados no .env"
echo "4. üîß Verificar m√≥dulos PHP necess√°rios"
echo "5. üåê Verificar configura√ß√£o do Cloudflare"
echo ""
echo "Pr√≥ximo passo: Executar test_production_cors.sh para verificar CORS"
echo ""
echo "=== FIM DA CORRE√á√ÉO ==="